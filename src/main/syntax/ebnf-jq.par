/~
EBNF Parser written in JS/CC
marc.portier@gmail.com - 2010
~/

/~
snatched from: http://karmin.ch/ebnf/index

"EBNF defined in itself" {
        syntax     = [ title ] "{" { production } "}" [ comment ].
        production = identifier "=" expression ( "." | ";" ) .
        expression = term { "|" term } .
        term       = factor { factor } .
        factor     = identifier
                   | literal
                   | "[" expression "]"
                   | "(" expression ")"
                   | "{" expression "}" .
        identifier = character { character } .
        title      = literal .
        comment    = literal .
        literal    = "'" character { character } "'"
                   | '"' character { character } '"' .
        }
~/

[*

;
(function($){

// node structs
function Syntax(set, title, comment) {
        this.set = set;
        this.title = title || "";
        this.comment = comment || "";
}
Syntax.prototype.toString = function() {
        var l = "\n---------------------------------------------------------\n";
        return l + "-- " + this.title + l + this.set + l +"comment:\n" + this.comment + l;
}
Syntax.prototype.nodetype="SYNTAX";


var PRODUCTION_SET = { 
        "label"   : "@@", 
        "join"    : function(i) { return  "\n" + i + "| "; },
        "nodetype": "PRODUCTION_SET"
};
var TERM_SET       = { 
        "label"   : "", 
        "join"    : function(i) { return (i==0) ? "" : "|";},
        "nodetype": "TERM_SET"
};
var FACTOR_SET       = { 
        "label"   : "", 
        "join"    : function(i) { return "";               },
        "nodetype": "FACTOR_SET"
};
function Set(t) {
        this.label    = t.label;
        this.join     = t.join;
        this.nodetype = t.nodetype;
        this.children = new Array();
}
Set.prototype.addChild = function(node) {
        this.children.push(node);
};;
Set.prototype.toString = function() {
        var cnt = this.children.length;
        var o = this.label;
        for (var i = 0; i < cnt; i++)
                o += this.join(i) + this.children[i].toString();
        return o;
}


function Production(id, expr) {
        this.id = id;
        this.expr = expr;
}
Production.prototype.toString = function(ind) {
        ind = ind || "";
        return ind + this.id + "=" + this.expr + " ." ;
}
Production.prototype.nodetype="PRODUCTION";


function Identifier(id) {
        this.id = id;
}
Identifier.prototype.toString = function() {
        return this.id;
};
Identifier.prototype.nodetype="IDENTIFIER";


function Literal(txt) {
        this.txt = txt;
}
Literal.prototype.toString = function() {
        return "\"" + this.txt + "\"";
};
Literal.prototype.nodetype="LITERAL";


function Optional(expr) {
        this.expr = expr;
}
Optional.prototype.toString = function() {
        return "[" + this.expr + "]";
};
Optional.prototype.nodetype="OPTIONAL";


function Repeating(expr) {
        this.expr = expr;
}
Repeating.prototype.toString = function() {
        return "{" + this.expr + "}";
};
Repeating.prototype.nodetype="REPEATING";


function Group(expr) {
        this.expr = expr;
}
Group.prototype.toString = function() {
        return "(" + this.expr + ")";
};
Group.prototype.nodetype="GROUP";


// node factories
function createNode(type, childs)  {
        var children = new Array();
        
        for( var i = 2; i < arguments.length; i++ )
                children.push( arguments[i] );

        return new Node(type, children);
};

function createSyntax(set, title, comment) {
        return new Syntax(set, title, comment);
};

function createSet() {
        return new Set(PRODUCTION_SET);
}

function createProduction(id, expr) {
        return new Production(id, expr);
}

function createExpression() {
        return new Set(TERM_SET);
}

function createTerm() {
        return new Set(FACTOR_SET);
}

function createIdentifier(id) {
        return new Identifier(id);
}

function createLiteral(txt) {
        return new Literal(txt);
}

function createOptional(termset) {
        return new Optional(termset);
}

function createRepeating(termset) {
        return new Repeating(termset);
}

function createGroup(termset) {
        return new Group(termset);
}

var parseComplete = function(syn){};

*]

/~  Tokens to be ignored (whitespace and comments)        
~/
!       ' |\r|\n|\t'
        ;

/~ Grammar tokens                                
~/
        '='
        ','
        '\|'
        '\{'
        '\}'
        '\['
        '\]'
        '\('
        '\)'
        '\.|;'                                           Terminator
        '[A-Za-z_][A-Za-z0-9_]*'                         Identifier
        '(\'([^\'\\]|\\.)*\')|(\"([^\"]|\\.)*\")'        Literal                [* ;
                                %match = %match.substr( 1, %match.length - 2 );
                                %match = %match.replace(/\\\'/g,"\'").replace(/\\\"/g,"\"").replace(/\\\\/g,"\\");            *]
        ;

##

/~ root is where it all starts
~/
root:           syntax                                     [* parseComplete(%1);                                              *]
                |
                ;
/~ syntax is basically set of productions optionally decorated with title and comment
~/
syntax:         Literal '{' productionset '}' Literal      [* %% = createSyntax( %3, %1, %5);                                 *]
                | Literal '{' productionset '}'            [* %% = createSyntax( %3, %1);                                     *]
                | '{' productionset '}' Literal            [* %% = createSyntax( %2, undefined, %4);                          *]
                | '{' productionset '}'                    [* %% = createSyntax( %2);                                         *]
                ;


/~ productionset is the recurring of at least one production
~/
productionset:  production                                [* %% = createSet(); %%.addChild(%1);                               *]
                | productionset production                [* %% = %1; %%.addChild(%2);                                        *]
                ;


/~ production is the actual named syntax-statement to plot out 
~/
production:     Identifier '=' expression Terminator      [* %% = createProduction(%1, %3);                                   *]
                ;


/~ expressions build up the production
~/
expression:     term                                      [* %% = createExpression(); %%.addChild(%1);                        *]
                | expression "|" term                     [* %% = %1; %%.addChild(%3);                                        *]
                ;

/~ terms make up the possible chosen paths in expressions
~/
term:           factor                                    [* %% = createTerm(); %%.addChild(%1);                              *]
                | term factor                             [* %% = %1; %1.addChild(%2);                                        *]
                ;
                                
/~ factors make up the sequential stuff in terms
~/
factor:         Identifier                                [* %% = createIdentifier(%1);                                       *]
                | Literal                                 [* %% = createLiteral(%1);                                          *]
                | "[" expression "]"                      [* %% = createOptional(%2);                                         *]
                | "{" expression "}"                      [* %% = createRepeating(%2);                                        *]
                | "(" expression ")"                      [* %% = createGroup(%2);                                            *]
                ;


[*

$.extend({
	"ebnfParse": function(str, fn, errfn) {

		parseComplete = fn || function(syn) { 
		    alert(syn.toString()); 
		};
		
	    var parseErrors = errfn || function(err) { 
	        alert("errors#" + err.length);
        };

	    
		var error_cnt 	= 0;
		var error_off	= new Array();
		var error_la	= new Array();

		var errors;
		if( ( error_cnt = __parse( str, error_off, error_la ) ) > 0 )
		{
			errors=new Array();
			for( var i = 0; i < error_cnt; i++ ) {
				var msg = "Parse error near >" + str.substr( error_off[i], 30 ) + 
					"<, expecting \"" + error_la[i].join() + "\"" ;
				errors.push(msg);
		    }
			parseErrors(errors);
		}
	}
});

})(jQuery);
*]
